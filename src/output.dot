digraph {
 node0 [label="OrdinaryCompilationUnit"]
 node1 [label="TopLevelClassOrInterfaceDeclaration"]
 node0 -> node1
 node2 [label="NormalClassDeclaration"]
 node1 -> node2
 node3 [label="PUBLIC"]
 node2 -> node3
 node4 [label="CLASS"]
 node2 -> node4
 node5 [label="IDENTIFIER(ArraySum)"]
 node2 -> node5
 node6 [label="ClassBody"]
 node2 -> node6
 node7 [label="FieldDeclaration"]
 node6 -> node7
 node8 [label="PRIVATE"]
 node7 -> node8
 node9 [label="STATIC"]
 node7 -> node9
 node10 [label="FieldDeclaration"]
 node7 -> node10
 node11 [label="INT"]
 node10 -> node11
 node12 [label="VariableDeclaratorList"]
 node10 -> node12
 node13 [label="="]
 node12 -> node13
 node14 [label="VariableDeclaratorId"]
 node13 -> node14
 node15 [label="IDENTIFIER(arr)"]
 node14 -> node15
 node16 [label="Dims"]
 node14 -> node16
 node17 [label="[]"]
 node16 -> node17
 node18 [label="[]"]
 node16 -> node18
 node19 [label="[]"]
 node16 -> node19
 node20 [label="ArrayInitializer"]
 node13 -> node20
 node21 [label="VariableInitializerList"]
 node20 -> node21
 node22 [label="ArrayInitializer"]
 node21 -> node22
 node23 [label="VariableInitializerList"]
 node22 -> node23
 node24 [label="ArrayInitializer"]
 node23 -> node24
 node25 [label="VariableInitializerList"]
 node24 -> node25
 node26 [label="LITERAL(1)"]
 node25 -> node26
 node27 [label="LITERAL(2)"]
 node25 -> node27
 node28 [label="ArrayInitializer"]
 node23 -> node28
 node29 [label="VariableInitializerList"]
 node28 -> node29
 node30 [label="LITERAL(3)"]
 node29 -> node30
 node31 [label="LITERAL(4)"]
 node29 -> node31
 node32 [label="ArrayInitializer"]
 node21 -> node32
 node33 [label="VariableInitializerList"]
 node32 -> node33
 node34 [label="ArrayInitializer"]
 node33 -> node34
 node35 [label="VariableInitializerList"]
 node34 -> node35
 node36 [label="LITERAL(5)"]
 node35 -> node36
 node37 [label="LITERAL(6)"]
 node35 -> node37
 node38 [label="ArrayInitializer"]
 node33 -> node38
 node39 [label="VariableInitializerList"]
 node38 -> node39
 node40 [label="LITERAL(7)"]
 node39 -> node40
 node41 [label="LITERAL(8)"]
 node39 -> node41
 node42 [label="MethodDeclaration"]
 node6 -> node42
 node43 [label="PUBLIC"]
 node42 -> node43
 node44 [label="STATIC"]
 node42 -> node44
 node45 [label="MethodDeclaration"]
 node42 -> node45
 node46 [label="MethodHeader"]
 node45 -> node46
 node47 [label="VOID"]
 node46 -> node47
 node48 [label="MethodDeclarator"]
 node46 -> node48
 node49 [label="IDENTIFIER(main)"]
 node48 -> node49
 node50 [label="FormalParameterList"]
 node48 -> node50
 node51 [label="FormalParameter"]
 node50 -> node51
 node52 [label="UnannArrayType"]
 node51 -> node52
 node53 [label="IDENTIFIER(String)"]
 node52 -> node53
 node54 [label="Dims"]
 node52 -> node54
 node55 [label="[]"]
 node54 -> node55
 node56 [label="IDENTIFIER(args)"]
 node51 -> node56
 node57 [label="Block"]
 node45 -> node57
 node58 [label="BlockStatements"]
 node57 -> node58
 node59 [label="LocalVariableDeclaration"]
 node58 -> node59
 node60 [label="INT"]
 node59 -> node60
 node61 [label="VariableDeclaratorList"]
 node59 -> node61
 node62 [label="="]
 node61 -> node62
 node63 [label="IDENTIFIER(sum)"]
 node62 -> node63
 node64 [label="LITERAL(0)"]
 node62 -> node64
 node65 [label="BasicForStatement"]
 node58 -> node65
 node66 [label="FOR"]
 node65 -> node66
 node67 [label="ForInit"]
 node65 -> node67
 node68 [label="LocalVariableDeclaration"]
 node67 -> node68
 node69 [label="INT"]
 node68 -> node69
 node70 [label="VariableDeclaratorList"]
 node68 -> node70
 node71 [label="="]
 node70 -> node71
 node72 [label="IDENTIFIER(i)"]
 node71 -> node72
 node73 [label="LITERAL(0)"]
 node71 -> node73
 node74 [label="<"]
 node65 -> node74
 node75 [label="IDENTIFIER(i)"]
 node74 -> node75
 node76 [label="LITERAL(2)"]
 node74 -> node76
 node77 [label="ForUpdate"]
 node65 -> node77
 node78 [label="StatementExpressionList"]
 node77 -> node78
 node79 [label="PreIncrementExpression"]
 node78 -> node79
 node80 [label="++"]
 node79 -> node80
 node81 [label="IDENTIFIER(i)"]
 node79 -> node81
 node82 [label="Block"]
 node65 -> node82
 node83 [label="BlockStatements"]
 node82 -> node83
 node84 [label="BasicForStatement"]
 node83 -> node84
 node85 [label="FOR"]
 node84 -> node85
 node86 [label="ForInit"]
 node84 -> node86
 node87 [label="LocalVariableDeclaration"]
 node86 -> node87
 node88 [label="INT"]
 node87 -> node88
 node89 [label="VariableDeclaratorList"]
 node87 -> node89
 node90 [label="="]
 node89 -> node90
 node91 [label="IDENTIFIER(j)"]
 node90 -> node91
 node92 [label="LITERAL(0)"]
 node90 -> node92
 node93 [label="<"]
 node84 -> node93
 node94 [label="IDENTIFIER(j)"]
 node93 -> node94
 node95 [label="LITERAL(2)"]
 node93 -> node95
 node96 [label="ForUpdate"]
 node84 -> node96
 node97 [label="StatementExpressionList"]
 node96 -> node97
 node98 [label="PreIncrementExpression"]
 node97 -> node98
 node99 [label="++"]
 node98 -> node99
 node100 [label="IDENTIFIER(j)"]
 node98 -> node100
 node101 [label="Block"]
 node84 -> node101
 node102 [label="BlockStatements"]
 node101 -> node102
 node103 [label="BasicForStatement"]
 node102 -> node103
 node104 [label="FOR"]
 node103 -> node104
 node105 [label="ForInit"]
 node103 -> node105
 node106 [label="LocalVariableDeclaration"]
 node105 -> node106
 node107 [label="INT"]
 node106 -> node107
 node108 [label="VariableDeclaratorList"]
 node106 -> node108
 node109 [label="="]
 node108 -> node109
 node110 [label="IDENTIFIER(k)"]
 node109 -> node110
 node111 [label="LITERAL(0)"]
 node109 -> node111
 node112 [label="<"]
 node103 -> node112
 node113 [label="IDENTIFIER(k)"]
 node112 -> node113
 node114 [label="LITERAL(2)"]
 node112 -> node114
 node115 [label="ForUpdate"]
 node103 -> node115
 node116 [label="StatementExpressionList"]
 node115 -> node116
 node117 [label="PreIncrementExpression"]
 node116 -> node117
 node118 [label="++"]
 node117 -> node118
 node119 [label="IDENTIFIER(k)"]
 node117 -> node119
 node120 [label="Block"]
 node103 -> node120
 node121 [label="BlockStatements"]
 node120 -> node121
 node122 [label="+="]
 node121 -> node122
 node123 [label="IDENTIFIER(sum)"]
 node122 -> node123
 node124 [label="[]"]
 node122 -> node124
 node125 [label="[]"]
 node124 -> node125
 node126 [label="[]"]
 node125 -> node126
 node127 [label="IDENTIFIER(arr)"]
 node126 -> node127
 node128 [label="IDENTIFIER(i)"]
 node126 -> node128
 node129 [label="IDENTIFIER(j)"]
 node125 -> node129
 node130 [label="IDENTIFIER(k)"]
 node124 -> node130
 node131 [label="MethodInvocation"]
 node58 -> node131
 node132 [label="ExpressionName"]
 node131 -> node132
 node133 [label="IDENTIFIER(System)"]
 node132 -> node133
 node134 [label="."]
 node132 -> node134
 node135 [label="IDENTIFIER(out)"]
 node132 -> node135
 node136 [label="."]
 node131 -> node136
 node137 [label="IDENTIFIER(println)"]
 node131 -> node137
 node138 [label="ArgumentList"]
 node131 -> node138
 node139 [label="+"]
 node138 -> node139
 node140 [label="LITERAL(Sum of array elements: )"]
 node139 -> node140
 node141 [label="IDENTIFIER(sum)"]
 node139 -> node141
 node142 [label="LocalVariableDeclaration"]
 node58 -> node142
 node143 [label="INT"]
 node142 -> node143
 node144 [label="VariableDeclaratorList"]
 node142 -> node144
 node145 [label="="]
 node144 -> node145
 node146 [label="IDENTIFIER(a)"]
 node145 -> node146
 node147 [label="LITERAL(5)"]
 node145 -> node147
 node148 [label="="]
 node144 -> node148
 node149 [label="IDENTIFIER(b)"]
 node148 -> node149
 node150 [label="LITERAL(10)"]
 node148 -> node150
 node151 [label="IfThenElseStatement"]
 node58 -> node151
 node152 [label="IF"]
 node151 -> node152
 node153 [label=">"]
 node151 -> node153
 node154 [label="IDENTIFIER(a)"]
 node153 -> node154
 node155 [label="IDENTIFIER(b)"]
 node153 -> node155
 node156 [label="Block"]
 node151 -> node156
 node157 [label="BlockStatements"]
 node156 -> node157
 node158 [label="MethodInvocation"]
 node157 -> node158
 node159 [label="ExpressionName"]
 node158 -> node159
 node160 [label="IDENTIFIER(System)"]
 node159 -> node160
 node161 [label="."]
 node159 -> node161
 node162 [label="IDENTIFIER(out)"]
 node159 -> node162
 node163 [label="."]
 node158 -> node163
 node164 [label="IDENTIFIER(println)"]
 node158 -> node164
 node165 [label="ArgumentList"]
 node158 -> node165
 node166 [label="LITERAL(a is greater than b)"]
 node165 -> node166
 node167 [label="ELSE"]
 node151 -> node167
 node168 [label="Block"]
 node151 -> node168
 node169 [label="BlockStatements"]
 node168 -> node169
 node170 [label="MethodInvocation"]
 node169 -> node170
 node171 [label="ExpressionName"]
 node170 -> node171
 node172 [label="IDENTIFIER(System)"]
 node171 -> node172
 node173 [label="."]
 node171 -> node173
 node174 [label="IDENTIFIER(out)"]
 node171 -> node174
 node175 [label="."]
 node170 -> node175
 node176 [label="IDENTIFIER(println)"]
 node170 -> node176
 node177 [label="ArgumentList"]
 node170 -> node177
 node178 [label="LITERAL(b is greater than a)"]
 node177 -> node178
 node179 [label="LocalVariableDeclaration"]
 node58 -> node179
 node180 [label="INT"]
 node179 -> node180
 node181 [label="VariableDeclaratorList"]
 node179 -> node181
 node182 [label="="]
 node181 -> node182
 node183 [label="IDENTIFIER(x)"]
 node182 -> node183
 node184 [label="LITERAL(10)"]
 node182 -> node184
 node185 [label="WhileStatement"]
 node58 -> node185
 node186 [label="WHILE"]
 node185 -> node186
 node187 [label=">"]
 node185 -> node187
 node188 [label="IDENTIFIER(x)"]
 node187 -> node188
 node189 [label="LITERAL(0)"]
 node187 -> node189
 node190 [label="Block"]
 node185 -> node190
 node191 [label="BlockStatements"]
 node190 -> node191
 node192 [label="MethodInvocation"]
 node191 -> node192
 node193 [label="ExpressionName"]
 node192 -> node193
 node194 [label="IDENTIFIER(System)"]
 node193 -> node194
 node195 [label="."]
 node193 -> node195
 node196 [label="IDENTIFIER(out)"]
 node193 -> node196
 node197 [label="."]
 node192 -> node197
 node198 [label="IDENTIFIER(print)"]
 node192 -> node198
 node199 [label="ArgumentList"]
 node192 -> node199
 node200 [label="+"]
 node199 -> node200
 node201 [label="IDENTIFIER(x)"]
 node200 -> node201
 node202 [label="LITERAL( )"]
 node200 -> node202
 node203 [label="PreDecrementExpression"]
 node191 -> node203
 node204 [label="--"]
 node203 -> node204
 node205 [label="IDENTIFIER(x)"]
 node203 -> node205
 node206 [label="MethodInvocation"]
 node58 -> node206
 node207 [label="ExpressionName"]
 node206 -> node207
 node208 [label="IDENTIFIER(System)"]
 node207 -> node208
 node209 [label="."]
 node207 -> node209
 node210 [label="IDENTIFIER(out)"]
 node207 -> node210
 node211 [label="."]
 node206 -> node211
 node212 [label="IDENTIFIER(println)"]
 node206 -> node212
 node213 [label="LocalVariableDeclaration"]
 node58 -> node213
 node214 [label="INT"]
 node213 -> node214
 node215 [label="VariableDeclaratorList"]
 node213 -> node215
 node216 [label="="]
 node215 -> node216
 node217 [label="IDENTIFIER(y)"]
 node216 -> node217
 node218 [label="LITERAL(1)"]
 node216 -> node218
 node219 [label="DoStatement"]
 node58 -> node219
 node220 [label="DO"]
 node219 -> node220
 node221 [label="Block"]
 node219 -> node221
 node222 [label="BlockStatements"]
 node221 -> node222
 node223 [label="MethodInvocation"]
 node222 -> node223
 node224 [label="ExpressionName"]
 node223 -> node224
 node225 [label="IDENTIFIER(System)"]
 node224 -> node225
 node226 [label="."]
 node224 -> node226
 node227 [label="IDENTIFIER(out)"]
 node224 -> node227
 node228 [label="."]
 node223 -> node228
 node229 [label="IDENTIFIER(print)"]
 node223 -> node229
 node230 [label="ArgumentList"]
 node223 -> node230
 node231 [label="+"]
 node230 -> node231
 node232 [label="IDENTIFIER(y)"]
 node231 -> node232
 node233 [label="LITERAL( )"]
 node231 -> node233
 node234 [label="PreIncrementExpression"]
 node222 -> node234
 node235 [label="++"]
 node234 -> node235
 node236 [label="IDENTIFIER(y)"]
 node234 -> node236
 node237 [label="WHILE"]
 node219 -> node237
 node238 [label="<="]
 node219 -> node238
 node239 [label="IDENTIFIER(y)"]
 node238 -> node239
 node240 [label="LITERAL(10)"]
 node238 -> node240
 node241 [label="MethodInvocation"]
 node58 -> node241
 node242 [label="ExpressionName"]
 node241 -> node242
 node243 [label="IDENTIFIER(System)"]
 node242 -> node243
 node244 [label="."]
 node242 -> node244
 node245 [label="IDENTIFIER(out)"]
 node242 -> node245
 node246 [label="."]
 node241 -> node246
 node247 [label="IDENTIFIER(println)"]
 node241 -> node247
 node248 [label="LocalVariableDeclaration"]
 node58 -> node248
 node249 [label="INT"]
 node248 -> node249
 node250 [label="VariableDeclaratorList"]
 node248 -> node250
 node251 [label="="]
 node250 -> node251
 node252 [label="IDENTIFIER(z)"]
 node251 -> node252
 node253 [label="LITERAL(0)"]
 node251 -> node253
 node254 [label="BasicForStatement"]
 node58 -> node254
 node255 [label="FOR"]
 node254 -> node255
 node256 [label="<"]
 node254 -> node256
 node257 [label="IDENTIFIER(z)"]
 node256 -> node257
 node258 [label="LITERAL(10)"]
 node256 -> node258
 node259 [label="ForUpdate"]
 node254 -> node259
 node260 [label="StatementExpressionList"]
 node259 -> node260
 node261 [label="PreIncrementExpression"]
 node260 -> node261
 node262 [label="++"]
 node261 -> node262
 node263 [label="IDENTIFIER(z)"]
 node261 -> node263
 node264 [label="Block"]
 node254 -> node264
 node265 [label="BlockStatements"]
 node264 -> node265
 node266 [label="MethodInvocation"]
 node265 -> node266
 node267 [label="ExpressionName"]
 node266 -> node267
 node268 [label="IDENTIFIER(System)"]
 node267 -> node268
 node269 [label="."]
 node267 -> node269
 node270 [label="IDENTIFIER(out)"]
 node267 -> node270
 node271 [label="."]
 node266 -> node271
 node272 [label="IDENTIFIER(print)"]
 node266 -> node272
 node273 [label="ArgumentList"]
 node266 -> node273
 node274 [label="+"]
 node273 -> node274
 node275 [label="IDENTIFIER(z)"]
 node274 -> node275
 node276 [label="LITERAL( )"]
 node274 -> node276
 node277 [label="MethodInvocation"]
 node58 -> node277
 node278 [label="ExpressionName"]
 node277 -> node278
 node279 [label="IDENTIFIER(System)"]
 node278 -> node279
 node280 [label="."]
 node278 -> node280
 node281 [label="IDENTIFIER(out)"]
 node278 -> node281
 node282 [label="."]
 node277 -> node282
 node283 [label="IDENTIFIER(println)"]
 node277 -> node283
 node284 [label="LocalVariableDeclaration"]
 node58 -> node284
 node285 [label="INT"]
 node284 -> node285
 node286 [label="VariableDeclaratorList"]
 node284 -> node286
 node287 [label="="]
 node286 -> node287
 node288 [label="IDENTIFIER(result)"]
 node287 -> node288
 node289 [label="MethodInvocation"]
 node287 -> node289
 node290 [label="IDENTIFIER(addNumbers)"]
 node289 -> node290
 node291 [label="("]
 node289 -> node291
 node292 [label=")"]
 node289 -> node292
 node293 [label="MethodInvocation"]
 node58 -> node293
 node294 [label="ExpressionName"]
 node293 -> node294
 node295 [label="IDENTIFIER(System)"]
 node294 -> node295
 node296 [label="."]
 node294 -> node296
 node297 [label="IDENTIFIER(out)"]
 node294 -> node297
 node298 [label="."]
 node293 -> node298
 node299 [label="IDENTIFIER(println)"]
 node293 -> node299
 node300 [label="ArgumentList"]
 node293 -> node300
 node301 [label="+"]
 node300 -> node301
 node302 [label="LITERAL(Result of addNumbers method: )"]
 node301 -> node302
 node303 [label="IDENTIFIER(result)"]
 node301 -> node303
 node304 [label="MethodDeclaration"]
 node6 -> node304
 node305 [label="PRIVATE"]
 node304 -> node305
 node306 [label="STATIC"]
 node304 -> node306
 node307 [label="MethodDeclaration"]
 node304 -> node307
 node308 [label="INT"]
 node307 -> node308
 node309 [label="MethodDeclarator"]
 node307 -> node309
 node310 [label="IDENTIFIER(addNumbers)"]
 node309 -> node310
 node311 [label="FormalParameterList"]
 node309 -> node311
 node312 [label="FormalParameter"]
 node311 -> node312
 node313 [label="INT"]
 node312 -> node313
 node314 [label="IDENTIFIER(a)"]
 node312 -> node314
 node315 [label="FormalParameter"]
 node311 -> node315
 node316 [label="INT"]
 node315 -> node316
 node317 [label="IDENTIFIER(b)"]
 node315 -> node317
 node318 [label="Block"]
 node307 -> node318
 node319 [label="BlockStatements"]
 node318 -> node319
 node320 [label="ReturnStatement"]
 node319 -> node320
 node321 [label="RETURN"]
 node320 -> node321
 node322 [label="+"]
 node320 -> node322
 node323 [label="IDENTIFIER(a)"]
 node322 -> node323
 node324 [label="IDENTIFIER(b)"]
 node322 -> node324
 }
