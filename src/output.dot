digraph {
 node0 [label="CompilationUnit"]
 node1 [label="OrdinaryCompilationUnit"]
 node0 -> node1
 node2 [label="TopLevelClassOrInterfaceDeclaration"]
 node1 -> node2
 node3 [label="NormalClassDeclaration"]
 node2 -> node3
 node4 [label="PUBLIC"]
 node3 -> node4
 node5 [label="CLASS"]
 node3 -> node5
 node6 [label="IDENTIFIER(ArraySum)"]
 node3 -> node6
 node7 [label="ClassBody"]
 node3 -> node7
 node8 [label="MethodDeclaration"]
 node7 -> node8
 node9 [label="VOID"]
 node8 -> node9
 node10 [label="MethodDeclarator"]
 node8 -> node10
 node11 [label="IDENTIFIER(main)"]
 node10 -> node11
 node12 [label="Block"]
 node8 -> node12
 node13 [label="{"]
 node12 -> node13
 node14 [label="BlockStatements"]
 node12 -> node14
 node15 [label="LocalVariableDeclaration"]
 node14 -> node15
 node16 [label="INT"]
 node15 -> node16
 node17 [label="VariableDeclaratorList"]
 node15 -> node17
 node18 [label="VariableDeclaratorId"]
 node17 -> node18
 node19 [label="IDENTIFIER(arr)"]
 node18 -> node19
 node20 [label="[]"]
 node18 -> node20
 node21 [label="IfThenStatement"]
 node14 -> node21
 node22 [label="IF"]
 node21 -> node22
 node23 [label="Expression"]
 node21 -> node23
 node24 [label=">="]
 node23 -> node24
 node25 [label="ArrayAccess"]
 node24 -> node25
 node26 [label="IDENTIFIER(arr)"]
 node25 -> node26
 node27 [label="Expression"]
 node25 -> node27
 node28 [label="INT_LITERAL(1)"]
 node27 -> node28
 node29 [label="INT_LITERAL(5)"]
 node24 -> node29
 node30 [label="Assignment"]
 node21 -> node30
 node31 [label="="]
 node30 -> node31
 node32 [label="ArrayAccess"]
 node31 -> node32
 node33 [label="IDENTIFIER(arr)"]
 node32 -> node33
 node34 [label="Expression"]
 node32 -> node34
 node35 [label="INT_LITERAL(2)"]
 node34 -> node35
 node36 [label="Expression"]
 node31 -> node36
 node37 [label="INT_LITERAL(3)"]
 node36 -> node37
 node38 [label="Assignment"]
 node14 -> node38
 node39 [label="="]
 node38 -> node39
 node40 [label="ArrayAccess"]
 node39 -> node40
 node41 [label="IDENTIFIER(arr)"]
 node40 -> node41
 node42 [label="Expression"]
 node40 -> node42
 node43 [label="INT_LITERAL(0)"]
 node42 -> node43
 node44 [label="Expression"]
 node39 -> node44
 node45 [label="INT_LITERAL(1)"]
 node44 -> node45
 node46 [label="}"]
 node12 -> node46
 node47 [label="MethodDeclaration"]
 node7 -> node47
 node48 [label="DOUBLE"]
 node47 -> node48
 node49 [label="MethodDeclarator"]
 node47 -> node49
 node50 [label="IDENTIFIER(foo)"]
 node49 -> node50
 node51 [label="FormalParameter"]
 node49 -> node51
 node52 [label="INT"]
 node51 -> node52
 node53 [label="VariableDeclaratorId"]
 node51 -> node53
 node54 [label="IDENTIFIER(x)"]
 node53 -> node54
 node55 [label="FormalParameter"]
 node49 -> node55
 node56 [label="INT"]
 node55 -> node56
 node57 [label="VariableDeclaratorId"]
 node55 -> node57
 node58 [label="IDENTIFIER(y)"]
 node57 -> node58
 node59 [label="Block"]
 node47 -> node59
 node60 [label="{"]
 node59 -> node60
 node61 [label="BlockStatements"]
 node59 -> node61
 node62 [label="LocalVariableDeclaration"]
 node61 -> node62
 node63 [label="INT"]
 node62 -> node63
 node64 [label="VariableDeclaratorList"]
 node62 -> node64
 node65 [label="="]
 node64 -> node65
 node66 [label="VariableDeclaratorId"]
 node65 -> node66
 node67 [label="IDENTIFIER(a)"]
 node66 -> node67
 node68 [label="Expression"]
 node65 -> node68
 node69 [label="+"]
 node68 -> node69
 node70 [label="IDENTIFIER(x)"]
 node69 -> node70
 node71 [label="IDENTIFIER(y)"]
 node69 -> node71
 node72 [label="LocalVariableDeclaration"]
 node61 -> node72
 node73 [label="INT"]
 node72 -> node73
 node74 [label="VariableDeclaratorList"]
 node72 -> node74
 node75 [label="="]
 node74 -> node75
 node76 [label="VariableDeclaratorId"]
 node75 -> node76
 node77 [label="IDENTIFIER(b)"]
 node76 -> node77
 node78 [label="Expression"]
 node75 -> node78
 node79 [label="*"]
 node78 -> node79
 node80 [label="IDENTIFIER(a)"]
 node79 -> node80
 node81 [label="INT_LITERAL(4)"]
 node79 -> node81
 node82 [label="LocalVariableDeclaration"]
 node61 -> node82
 node83 [label="INT"]
 node82 -> node83
 node84 [label="VariableDeclaratorList"]
 node82 -> node84
 node85 [label="="]
 node84 -> node85
 node86 [label="VariableDeclaratorId"]
 node85 -> node86
 node87 [label="IDENTIFIER(c)"]
 node86 -> node87
 node88 [label="Expression"]
 node85 -> node88
 node89 [label="+"]
 node88 -> node89
 node90 [label="INT_LITERAL(3)"]
 node89 -> node90
 node91 [label="INT_LITERAL(2)"]
 node89 -> node91
 node92 [label="}"]
 node59 -> node92
 node93 [label="MethodDeclaration"]
 node7 -> node93
 node94 [label="PUBLIC"]
 node93 -> node94
 node95 [label="STATIC"]
 node93 -> node95
 node96 [label="VOID"]
 node93 -> node96
 node97 [label="MethodDeclarator"]
 node93 -> node97
 node98 [label="IDENTIFIER(main)"]
 node97 -> node98
 node99 [label="FormalParameter"]
 node97 -> node99
 node100 [label="STRING"]
 node99 -> node100
 node101 [label="VariableDeclaratorId"]
 node99 -> node101
 node102 [label="IDENTIFIER(args)"]
 node101 -> node102
 node103 [label="[]"]
 node101 -> node103
 node104 [label="Block"]
 node93 -> node104
 node105 [label="{"]
 node104 -> node105
 node106 [label="}"]
 node104 -> node106
 }
